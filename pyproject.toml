[tool.poetry]
name = "qualibrate-runner"
version = "0.2.4"
description = ""
authors = ["Quantum Machines <info@quantum-machines.co>"]
readme = "README.md"

    [tool.poetry.dependencies]
    python = "^3.9,<3.13"
    fastapi = "^0.115.2"
    uvicorn = "^0.34.0"
    pydantic-settings = "^2.2.1"
    click = "^8.1.7"
    tomli = { version = "^2.0.1", python = "<3.11" }
    tomli-w = "^1.0.0"
    jsonpatch = "^1.33"
    qualibrate-core = "^0.2.4"
    qualibrate-config = "^0.1.1"

    [tool.poetry.group.dev.dependencies]
    mypy = "^1.10.0"
    ruff = "^0.8.0"
    poethepoet = "^0.31.1"

    #[tool.poetry.group.qm-dev.dependencies]
    #qualibrate-config = {path = "../qualibrate-config", develop = true}
    #qualibrate-core = {path = "../qualibrate-core", develop = true}

    [tool.poetry.scripts]
    qualibrate-runner = "qualibrate_runner.__main__:main"

[tool.mypy]
python_version = "3.9"
strict = true
warn_return_any = true

    [[tool.mypy.overrides]]
    module = ["jsonpatch", "jsonpointer"]
    ignore_missing_imports = true

[tool.ruff]
line-length = 80
target-version = "py39"
exclude = ["calibrations"]

    [tool.ruff.lint]
    select = [
        "E",   # pycodestyle
        "F",   # Pyflakes
        "UP",  # pyupgrade
        "B",   # flake8-bugbear
        "SIM", # flake8-simplify
        "I",   # isort
    ]

        [tool.ruff.lint.pycodestyle]
        max-line-length = 80
        max-doc-length = 80

[tool.poe.tasks]
lint = "ruff check ."
lint-fix = "ruff check --fix ."
format = "ruff format --check ."
format-fix = "ruff format ."
type = "mypy ."
check.sequence = ["lint", "format", "type"]
fix.sequence = ["lint-fix", "format-fix", "type"]
fix.ignore_fail = "return_non_zero"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
